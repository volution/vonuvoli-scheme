

(bytevector? (~hash-blake3-seeded #null 64 #t)) => #t

(bytevector? (~hash-blake3-seeded #null 64 #f)) => #t

(bytevector? (~hash-blake3-unseeded #null 64)) => #t




(~hash-blake3-unseeded #null 256) => #u8(205 185 133 18 20 106 129 153 79 74 47 47 251 236 86 213 1 111 196 249 251 91 191 111 225 78 102 95 19 236 251 190)
(~hash-blake3-unseeded #t 256) => #u8(199 84 158 110 64 141 130 130 131 33 32 116 183 128 16 235 218 32 42 132 64 75 161 157 50 28 49 38 64 41 48 74)
(~hash-blake3-unseeded #f 256) => #u8(5 165 47 228 122 99 24 234 98 104 199 81 40 152 240 140 97 205 87 96 39 140 5 34 94 33 53 145 83 224 64 226)
(~hash-blake3-unseeded 0 256) => #u8(211 16 172 220 137 110 105 28 128 227 168 76 236 102 132 213 181 64 181 85 245 139 21 80 100 226 146 180 114 155 253 126)
(~hash-blake3-unseeded 0.0 256) => #u8(70 75 65 191 251 211 226 75 0 142 212 51 143 180 65 176 64 218 194 69 143 42 175 218 132 9 155 128 220 250 121 61)
(~hash-blake3-unseeded '|| 256) => #u8(120 125 41 134 191 129 250 52 194 238 150 191 133 243 218 225 22 129 203 79 13 196 185 171 112 4 27 137 148 104 61 207)
(~hash-blake3-unseeded "" 256) => #u8(197 130 125 15 246 58 230 65 196 250 166 116 85 216 169 123 53 101 91 195 110 229 219 133 77 248 13 176 101 251 62 113)
(~hash-blake3-unseeded #u8"" 256) => #u8(99 197 86 217 72 60 93 31 48 167 225 129 213 130 14 71 135 243 219 255 97 169 159 117 50 91 21 81 29 55 116 215)
(~hash-blake3-unseeded #() 256) => #u8(141 90 140 118 24 56 184 159 220 78 228 138 246 121 126 167 107 97 119 44 40 171 254 145 157 234 150 118 245 224 203 192)
(~hash-blake3-unseeded '(#null . #null) 256) => #u8(32 33 132 97 212 158 40 133 156 219 86 242 141 47 242 221 42 120 79 215 55 209 122 247 158 130 59 50 19 82 75 89)




(define (hash-seeded-seeded-eq? left right left-seed right-seed) (equal? (~hash-blake3-seeded left 256 left-seed) (~hash-blake3-seeded right 256 right-seed))) => !ignore

(hash-seeded-seeded-eq? "abc" "abc" #f #f) => #t
(hash-seeded-seeded-eq? "abc" "abc" #t #t) => #t
(hash-seeded-seeded-eq? "abc" "abc" 0 0) => #t
(hash-seeded-seeded-eq? "abc" "abc" +1 +1) => #t
(hash-seeded-seeded-eq? "abc" "abc" -1 -1) => #t
(hash-seeded-seeded-eq? "abc" "abc" #u8"12345678" #u8"12345678") => #t
(hash-seeded-seeded-eq? "abc" "abc" #u8"12345678123456781234567812345678" #u8"12345678123456781234567812345678") => #t

(hash-seeded-seeded-eq? "abc" "abc" #f #t) => #f
(hash-seeded-seeded-eq? "abc" "abc" +1 -1) => #f
(hash-seeded-seeded-eq? "abc" "abc" #u8"00000000" #u8"ffffffff") => #f
(hash-seeded-seeded-eq? "abc" "abc" #u8"00000000" #u8"00000000000000000000000000000000") => #f
(hash-seeded-seeded-eq? "abc" "abc" #u8"ffffffff" #u8"ffffffffffffffffffffffffffffffff") => #f




(define (hash-seeded-unseeded-eq? left right left-seed) (equal? (~hash-blake3-seeded left 256 left-seed) (~hash-blake3-unseeded right 256))) => !ignore

(hash-seeded-unseeded-eq? "abc" "abc" #u8"") => #t
(hash-seeded-unseeded-eq? "abc" "abc" #f) => #t
(hash-seeded-unseeded-eq? "abc" "abc" #t) => #f
(hash-seeded-unseeded-eq? "abc" "abc" 0) => #f




(define (hash-seeded-eq? left right) (equal? (~hash-blake3-seeded left 256) (~hash-blake3-seeded right 256))) => !ignore


(hash-seeded-eq? #null #null) => #t
(hash-seeded-eq? #void #void) => #t
(hash-seeded-eq? #undefined #undefined) => #t

(hash-seeded-eq? #t #t) => #t
(hash-seeded-eq? #f #f) => #t
(hash-seeded-eq? #t #f) => #f


(hash-seeded-eq? 0 0) => #t
(hash-seeded-eq? -1 +1) => #f

(hash-seeded-eq? 0.0 0.0) => #t
(hash-seeded-eq? -1.0 +1.0) => #f

(hash-seeded-eq? 0 0.0) => #f
(hash-seeded-eq? +1.0 +1) => #f
(hash-seeded-eq? -1.0 -1) => #f


(hash-seeded-eq? "" "") => #t
(hash-seeded-eq? "abc" "abc") => #t
(hash-seeded-eq? "" "abc") => #f
(hash-seeded-eq? "ab" "ba") => #f

(hash-seeded-eq? (~string->immutable "") (~string->mutable "")) => #t
(hash-seeded-eq? (~string->immutable "abc") (~string->mutable "abc")) => #t

(hash-seeded-eq? #u8() #u8()) => #t
(hash-seeded-eq? #u8(0 1 2) #u8(0 1 2)) => #t
(hash-seeded-eq? #u8() #u8(0 1 2)) => #f
(hash-seeded-eq? #u8(0 1) #u8(1 0)) => #f

(hash-seeded-eq? (~bytevector->immutable #u8()) (~bytevector->mutable #u8())) => #t
(hash-seeded-eq? (~bytevector->immutable #u8(0 1 2)) (~bytevector->mutable #u8(0 1 2))) => #t

(hash-seeded-eq? "" #u8()) => #f
(hash-seeded-eq? "abc" #u8(97 98 99)) => #f


(hash-seeded-eq? #() #()) => #t
(hash-seeded-eq? #(0 1 2) #(0 1 2)) => #t
(hash-seeded-eq? #() #(0 1 2)) => #f
(hash-seeded-eq? #(0 1) #(1 0)) => #f


(hash-seeded-eq? '() '()) => #t
(hash-seeded-eq? '(0 1 2) '(0 1 2)) => #t
(hash-seeded-eq? '() '(0 1 2)) => #f
(hash-seeded-eq? '(0 1) '(1 0)) => #f

(hash-seeded-eq? '(0 . 1) '(0 . 1)) => #t
(hash-seeded-eq? '(0 . 1) '(1 . 0)) => #f




(define (hash-unseeded-eq? left right) (equal? (~hash-blake3-unseeded left 256) (~hash-blake3-unseeded right 256))) => !ignore


(hash-unseeded-eq? #null #null) => #t
(hash-unseeded-eq? #void #void) => #t
(hash-unseeded-eq? #undefined #undefined) => #t

(hash-unseeded-eq? #t #t) => #t
(hash-unseeded-eq? #f #f) => #t
(hash-unseeded-eq? #t #f) => #f


(hash-unseeded-eq? 0 0) => #t
(hash-unseeded-eq? -1 +1) => #f

(hash-unseeded-eq? 0.0 0.0) => #t
(hash-unseeded-eq? -1.0 +1.0) => #f

(hash-unseeded-eq? 0 0.0) => #f
(hash-unseeded-eq? +1.0 +1) => #f
(hash-unseeded-eq? -1.0 -1) => #f


(hash-unseeded-eq? "" "") => #t
(hash-unseeded-eq? "abc" "abc") => #t
(hash-unseeded-eq? "" "abc") => #f
(hash-unseeded-eq? "ab" "ba") => #f

(hash-unseeded-eq? (~string->immutable "") (~string->mutable "")) => #t
(hash-unseeded-eq? (~string->immutable "abc") (~string->mutable "abc")) => #t

(hash-unseeded-eq? #u8() #u8()) => #t
(hash-unseeded-eq? #u8(0 1 2) #u8(0 1 2)) => #t
(hash-unseeded-eq? #u8() #u8(0 1 2)) => #f
(hash-unseeded-eq? #u8(0 1) #u8(1 0)) => #f

(hash-unseeded-eq? (~bytevector->immutable #u8()) (~bytevector->mutable #u8())) => #t
(hash-unseeded-eq? (~bytevector->immutable #u8(0 1 2)) (~bytevector->mutable #u8(0 1 2))) => #t

(hash-unseeded-eq? "" #u8()) => #f
(hash-unseeded-eq? "abc" #u8(97 98 99)) => #f


(hash-unseeded-eq? #() #()) => #t
(hash-unseeded-eq? #(0 1 2) #(0 1 2)) => #t
(hash-unseeded-eq? #() #(0 1 2)) => #f
(hash-unseeded-eq? #(0 1) #(1 0)) => #f


(hash-unseeded-eq? '() '()) => #t
(hash-unseeded-eq? '(0 1 2) '(0 1 2)) => #t
(hash-unseeded-eq? '() '(0 1 2)) => #f
(hash-unseeded-eq? '(0 1) '(1 0)) => #f

(hash-unseeded-eq? '(0 . 1) '(0 . 1)) => #t
(hash-unseeded-eq? '(0 . 1) '(1 . 0)) => #f

