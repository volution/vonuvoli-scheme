

(~fs-directory-exists? "./tests") => #t
(~fs-file-exists? "./tests/scheme.rs") => #t
(~fs-symlink-exists? "/proc/self") => #t

(~fs-directory-exists? "./tests/__does_not_exist__") => #f
(~fs-file-exists? "./tests/__does_not_exist__") => #f
(~fs-symlink-exists? "./tests/__does_not_exist__") => #f




(~fs-mount? "/") => #t
(~fs-mount? "/" #t) => #t
(~fs-mount? "/" #f) => #t

(~fs-mount? "/proc") => #t
(~fs-mount? "/proc" #t) => #t
(~fs-mount? "/proc" #f) => #t

(~fs-mount? "/proc/self") => #f
(~fs-mount? "/proc/self" #t) => #f

(~fs-mount? "/proc/1") => #f
(~fs-mount? "/proc/1" #t) => #f
(~fs-mount? "/proc/1" #f) => #f




(~opaque? (~fs-metadata "./tests")) => #t
(~opaque? (~fs-metadata "./tests/scheme.rs")) => #t
(~opaque? (~fs-metadata "./__does_not_exist__")) => #f

(~fs-metadata? (~fs-metadata "./tests")) => #t
(~fs-metadata? (~fs-metadata "./tests/scheme.rs")) => #t
(~fs-metadata "./__does_not_exist__") => #f

(~fs-metadata? (~fs-metadata "./__does_not_exist__")) => #f

(~opaque? (~fs-metadata "/proc/self")) => #t
(~opaque? (~fs-metadata "/proc/self" #t)) => #t
(~opaque? (~fs-metadata "/proc/self" #f)) => #t


(~fs-metadata-eq? "/proc/self" (~fs-link-resolve "/proc/self" #t)) => #t
(~fs-metadata-eq? "/proc/self" (~fs-link-resolve "/proc/self" #t) #t) => #t
(~fs-metadata-eq? "/proc/self" (~fs-link-resolve "/proc/self" #t) #f) => #f


(~fs-metadata-kind "./tests") => 'directory
(~fs-metadata-kind "./tests/scheme.rs") => 'file

(~fs-metadata-directory? "./tests") => #t
(~fs-metadata-file? "./tests/scheme.rs") => #t

(~fs-metadata-file? "./tests") => #f
(~fs-metadata-directory? "./tests/scheme.rs") => #f

(~fs-metadata-kind? "./tests" 'directory) => #t
(~fs-metadata-kind? "./tests/scheme.rs" 'file) => #t

(~fs-metadata-kind? "./tests" 'file) => #f
(~fs-metadata-kind? "./tests/scheme.rs" 'directory) => #f


(~fs-metadata-kind "/proc/self") => 'directory
(~fs-metadata-kind "/proc/self" #t) => 'directory
(~fs-metadata-kind "/proc/self" #f) => 'symlink

(~fs-metadata-directory? "/proc/self") => #t
(~fs-metadata-symlink? "/proc/self") => #t
(~fs-metadata-file? "/proc/self") => #f

(~fs-metadata-kind "/dev/null") => 'character-device
(~fs-metadata-kind? "/dev/null" 'character-device) => #t
(~fs-metadata-character-device? "/dev/null") => #t


; (~fs-metadata-readonly? "./tests") => #f
(~fs-metadata-readable? "./tests") => #t
; (~fs-metadata-writeable? "./tests") => #t
(~fs-metadata-directory-traversable? "./tests") => #t

; (~fs-metadata-readonly? "./tests/scheme.rs") => #f
(~fs-metadata-readable? "./tests/scheme.rs") => #t
; (~fs-metadata-writeable? "./tests/scheme.rs") => #t
(~fs-metadata-file-executable? "./tests/scheme.rs") => #f

(integer? (~fs-metadata-file-size "./tests/scheme.rs")) => #t
(~fs-metadata-file-empty? "./tests/scheme.rs") => #f
(~fs-metadata-file-not-empty? "./tests/scheme.rs") => #t


(integer? (~fs-metadata-unix-mode "/dev/null")) => #t
(integer? (~fs-metadata-unix-type "/dev/null")) => #t
(integer? (~fs-metadata-unix-permissions "/dev/null")) => #t
(integer? (~fs-metadata-unix-user-identifier "/dev/null")) => #t
(integer? (~fs-metadata-unix-group-identifier "/dev/null")) => #t
(integer? (~fs-metadata-unix-data-accessed-at "/dev/null")) => #t
(integer? (~fs-metadata-unix-data-modified-at "/dev/null")) => #t
(integer? (~fs-metadata-unix-inode-changed-at "/dev/null")) => #t
(integer? (~fs-metadata-unix-inode-device "/dev/null")) => #t
(integer? (~fs-metadata-unix-inode-number "/dev/null")) => #t
(integer? (~fs-metadata-unix-inode-links "/dev/null")) => #t

(~fs-metadata-unix-mode "/dev/null") => #o20666
(~fs-metadata-unix-type "/dev/null") => #o20000
(~fs-metadata-unix-permissions "/dev/null") => #o666
;(~fs-metadata-unix-user-identifier "/dev/null") => 0
;(~fs-metadata-unix-group-identifier "/dev/null") => 0
(~fs-metadata-unix-inode-links "/dev/null") => 1




(list? (~fs-directory-list "./tests")) => #t
(length (~fs-directory-list "./tests")) => 9

(vector? (~fs-directory-list->vector "./tests")) => #t
(vector-length (~fs-directory-list->vector "./tests")) => 9

(~path->string (~first (~fs-directory-list "./tests"))) => "_outputs"

(~path->string (~first (~fs-directory-list "./tests" #f))) => "_outputs"
(~path->string (~first (~fs-directory-list "./tests" #t))) => "./tests/_outputs"

(~path->string (car (~first (~fs-directory-list "./tests" #f #t #t)))) => "_outputs"
(~path->string (car (~first (~fs-directory-list "./tests" #t #t #t)))) => "./tests/_outputs"

(cdr (~first (~fs-directory-list "./tests" #f #t #f))) => 'directory
(cadr (~first (~fs-directory-list "./tests" #f #t #t))) => 'directory

(~fs-metadata-directory? (cdr (~first (~fs-directory-list "./tests" #f #f #t)))) => #t
(~fs-metadata-directory? (cddr (~first (~fs-directory-list "./tests" #f #t #t)))) => #t


(~fs-directory-fold "./tests" (lambda (count name) (+ count 1)) 0) => 9
(~fs-directory-fold "./tests" (lambda (count name) (+ count 1)) 0 #t #f #f) => 9
(~fs-directory-fold "./tests" (lambda (count name) (+ count 1)) 0 #f #f #f) => 9

(~fs-directory-fold "./tests" (lambda (count name kind) (if (eq? kind 'file) (+ count 1) count)) 0 #f #t #f) => 7
(~fs-directory-fold "./tests" (lambda (count name kind metadata) (if (eq? kind 'file) (+ count 1) count)) 0 #f #t #t) => 7

(~fs-directory-fold "./tests" (lambda (count name metadata) (if (~fs-metadata-file? metadata) (+ count 1) count)) 0 #f #f #t) => 7
(~fs-directory-fold "./tests" (lambda (count name kind metadata) (if (~fs-metadata-file? metadata) (+ count 1) count)) 0 #f #t #t) => 7


(/ (~fs-directory-fold-recursive "./tests" (lambda (count parent name) (+ count 1)) 0) 100) => 2
(/ (~fs-directory-fold-recursive "./tests" (lambda (count parent name) (+ count 1)) #f 0) 100) => 2

(/ (~fs-directory-fold-recursive "./tests"
		(lambda (count parent name) (+ count 1))
		(lambda (count parent name) #t)
		0)
	100)
	=> 2

(~fs-directory-fold-recursive "./tests"
		(lambda (count parent name) (+ count 1))
		(lambda (count parent name) #f)
		0)
	=> 9

(~fs-directory-fold-recursive "./tests"
		(lambda (count path) (+ count 1))
		(lambda (count path) #f)
		0
		#t)
	=> 9

(~fs-directory-fold-recursive "./tests"
		(lambda (count parent name kind) (if (eq? kind 'file) (+ count 1) count))
		(lambda (count parent name kind) #f)
		0
		#f #t)
	=> 7

(~fs-directory-fold-recursive "./tests"
		(lambda (count parent name kind metadata) (if (eq? kind 'file) (+ count 1) count))
		(lambda (count parent name kind metadata) #f)
		0
		#f #t #t)
	=> 7

(~fs-directory-fold-recursive "./tests"
		(lambda (count parent name metadata) (if (~fs-metadata-file? metadata) (+ count 1) count))
		(lambda (count parent name metadata) #f)
		0
		#f #f #t)
	=> 7

(~fs-directory-fold-recursive "./tests"
		(lambda (count parent name kind metadata) (if (~fs-metadata-file? metadata) (+ count 1) count))
		(lambda (count parent name kind metadata) #f)
		0
		#f #t #t)
	=> 7




(define-values (temp-1-path temp-1-lock) (~fs-temporary-file)) => !ignore
(~path? temp-1-path) => #t
(~fs-file-exists? temp-1-path) => #t
(~opaque? temp-1-lock) => #t
(~fs-temporary-release temp-1-lock) => #void
(~fs-file-exists? temp-1-path) => #f
(~fs-exists? temp-1-path) => #f


(define-values (temp-2-path temp-2-lock) (~fs-temporary-directory)) => !ignore
(~path? temp-2-path) => #t
(~fs-directory-exists? temp-2-path) => #t
(~opaque? temp-2-lock) => #t
(~fs-temporary-release temp-2-lock) => #void
(~fs-directory-exists? temp-2-path) => #f
(~fs-exists? temp-2-path) => #f

