#!/dev/null




++<< workbench / initialize
	
	test "${#}" -eq 0
	
	"${ZRUN[@]}" ':: workbench / store / initialize'
	
	"${ZRUN[@]}" ':: workbench / rustup / initialize'
	"${ZRUN[@]}" ':: workbench / rustup / install'
	
	"${ZRUN[@]}" ':: workbench / cargo / install / tools'
	
	"${ZRUN[@]}" ':: cargo / dependencies / fetch'
!!




<< workbench / cargo / install / tools
	
	test "${#}" -eq 0
	
	export -- __CARGO__TARGET_DIR="${__CARGO__TARGET_DIR:-cargo--install}"
	
	_tools=(
			cargo-tree
			cargo-license
			cargo-outdated
			cargo-cyclonedx
		#	cargo-hack
		#	cargo-watch
		#	watchexec-cli
		#	hyperfine
		)
	
	for _tool in "${_tools[@]}" ; do
		"${ZRUN[@]}" ':: workbench / cargo / execute' install -- "${_tool}"
	done
!!




<< workbench / rustup / install
	
	test "${#}" -eq 0
	
	case "${__RUST__OS}" in
		
		( linux )
			_target_0=x86_64-unknown-linux-gnu
			_targets=(
					x86_64-unknown-linux-gnu
					x86_64-unknown-linux-musl
				)
			_toolchains=(
					stable
				#	beta
				#	nightly
				)
			_components=(
					cargo-x86_64-unknown-linux-gnu
					rustc-x86_64-unknown-linux-gnu
					rust-std-x86_64-unknown-linux-gnu
					rust-std-x86_64-unknown-linux-musl
					rust-docs-x86_64-unknown-linux-gnu
					rustfmt-x86_64-unknown-linux-gnu
					clippy-x86_64-unknown-linux-gnu
				)
		;;
		
		( * )
			printf -- '[ee]  invalid Rust OS: `%s`;  aborting!\n' "${__RUST__OS}" >&2
			exit -- 1
		;;
	esac
	
	for _toolchain in "${_toolchains[@]}" ; do
		
		"${ZRUN[@]}" ':: workbench / rustup / execute' toolchain install --target "${_target_0}" --profile minimal -- "${_toolchain}"
		
		for _component in "${_components[@]}" ; do
			"${ZRUN[@]}" ':: workbench / rustup / execute' component add --target "${_target_0}" --toolchain "${_toolchain}" -- "${_component}"
		done
		
		for _target in "${_targets[@]}" ; do
			if test ! -e "./.scratch/cargo--${_toolchain}--${_target}" ; then
				mkdir -- "./.scratch/cargo--${_toolchain}--${_target}"
				if ! test -e "./.scratch/cargo--${_toolchain}--${_target}/registry" ; then
					ln -s -f -T -- ../registry "./.scratch/cargo--${_toolchain}--${_target}/registry"
				fi
				if ! test -e "./.scratch/cargo--${_toolchain}--${_target}/bin" ; then
					ln -s -f -T -- "../rustup/toolchains/${_toolchain}-${_target_0}/bin" "./.scratch/cargo--${_toolchain}--${_target}/bin"
				fi
				touch -- "./.scratch/cargo--${_toolchain}--${_target}/.initialized"
			fi
		done
		
		if test ! -e "./.scratch/cargo--${_toolchain}--default" ; then
			ln -s -f -T -- "./cargo--${_toolchain}--${_target_0}" "./.scratch/cargo--${_toolchain}--default"
		fi
	done
!!




--<< workbench / cargo / execute
	
	if test "${#}" -eq 0 ; then
		set -- cargo
	fi
	case "${1}" in
		( cargo | cargo-* )
			set -- "${@}"
		;;
		( * )
			set -- cargo "${@}"
		;;
	esac
	
	export -- __CARGO__TARGET_DIR="${__CARGO__TARGET_DIR:-default}"
	
	RUSTUP_HOME="$( exec -- readlink -e -- "${RUSTUP_HOME:-./.scratch/rustup}" )"
	test -d "${RUSTUP_HOME}"
	test -e "${RUSTUP_HOME}/.initialized"
	
	CARGO_HOME="$( exec -- readlink -e -- "./.scratch/cargo--${__RUST__TOOLCHAIN}--${__RUST__TARGET}" )"
	test -d "${CARGO_HOME}"
	test -e "${CARGO_HOME}/.initialized"
	
	CARGO_TARGET_DIR="$( exec -- readlink -e -- "./.scratch/target/${__CARGO__TARGET_DIR}" )"
	test -d "${CARGO_TARGET_DIR}"
	test -e "${CARGO_TARGET_DIR}/.initialized"
	
	_rustflags=()
	if test -n "${__RUST__FLAGS:-}" ; then
		_rustflags+=( "${__RUST__FLAGS}" )
	fi
	case "${__RUST__LINKAGE}" in
		( dynamic )
			_rustflags+=(
					-C target-feature=-crt-static
					-C relocation-model=pic
					-C rpath=no
				)
		;;
		( static )
			_rustflags+=(
					-C target-feature=+crt-static
					-C relocation-model=static
				)
		;;
		( * )
			printf -- '[ee]  invalid Rust linkage `%s`;  aborting!\n' "${__RUST__LINKAGE}" >&2
		;;
	esac
	_rustflags+=(
			-C target-cpu=native
		)
	_rustflags+=(
			-C linker=clang
		#!	-C link-arg=-fuse-ld=mold
			-C link-arg=-fuse-ld=lld
		)
	_rustflags+=(
			-C link-arg=-Wl,--compress-debug-sections=none
		#~	-C link-arg=-Wl,--compress-debug-sections=zstd
		#~	-C link-arg=-Wl,--compress-debug-sections=zlib
		)
	_rustflags+=(
			-C link-self-contained=no
			-C prefer-dynamic=no
		)
	_rustflags+=(
			-C force-frame-pointers=no
		)
	_rustflags+=(
			--remap-path-prefix "$( exec -- readlink -e -- . )=.../workbench"
			--remap-path-prefix "$( exec -- readlink -e -- ./sources )=.../sources"
			--remap-path-prefix "$( exec -- readlink -e -- ./target )=.../target"
			--remap-path-prefix "$( exec -- readlink -e -- ./.scratch )=.../scratch"
			--remap-path-prefix "${RUSTUP_HOME}=.../rust/rustup"
			--remap-path-prefix "${CARGO_HOME}=.../rust/cargo"
			--remap-path-prefix "${CARGO_HOME}/registry=.../rust/cargo/registry"
			--remap-path-prefix "${CARGO_TARGET_DIR}=.../target"
			--remap-path-prefix "$( exec -- readlink -e -- "./.scratch" )/cargo--${__RUST__TOOLCHAIN}--${__RUST__TARGET}=.../rust/cargo"
			--remap-path-prefix "$( exec -- readlink -e -- "./.scratch" )/cargo--${__RUST__TOOLCHAIN}--${__RUST__TARGET}/registry=.../rust/cargo/registry"
			--remap-path-prefix "$( exec -- readlink -e -- "./.scratch" )/cargo=.../rust/cargo"
			--remap-path-prefix "$( exec -- readlink -e -- "./.scratch" )/cargo/registry=.../rust/cargo/registry"
			--remap-path-prefix "$( exec -- readlink -e -- "./.scratch" )/registry=.../rust/cargo/registry"
		)
	
	_environment=(
			
			RUSTUP_HOME="${RUSTUP_HOME}"
			CARGO_HOME="${CARGO_HOME}"
			CARGO_TARGET_DIR="${CARGO_TARGET_DIR}"
			CARGO_BUILD_RUSTFLAGS="${_rustflags[*]}"
			
			RUSTC_BOOTSTRAP=1
			
			PATH="${CARGO_HOME}/bin:/usr/bin:/bin"
			USER=cargo
			HOME=/home/cargo
			TMPDIR="${TMPDIR}"
			TERM="${TERM}"
			
			LANG=C.UTF-8
			LC_ALL=C.UTF-8
			
		)
	
	readarray -d '' -- _environment_0 \
		< <( exec -- sort -z -- /proc/self/environ ) \
	#
	_environment_inherit=()
	_variables_inherit=(
			CARGO_BUILD_JOBS
			CARGO_LOG
			CARGO_TERM_VERBOSE
			CARGO_TERM_PROGRESS_WHEN
			CARGO_TERM_COLOR
			RUST_BACKTRACE
			RUST_MIN_STACK
		)
	for _variable_0 in "${_environment_0[@]}" ; do
		for _variable_inherit in "${_variables_inherit[@]}" ; do
			if test "${_variable_inherit}" == "${_variable_0%%=*}" ; then
				_environment+=( "${_variable_0}" )
				break
			fi
		done
	done
	
	exec -- "${ZRUN[@]}" ':: workbench / delegate / execute' \
			env -i "${_environment_inherit[@]}" "${_environment[@]}" \
			---- \
			"${@}" \
	#
!!




--<< workbench / rustup / execute
	
	export -- RUSTUP_HOME="$( exec -- readlink -e -- "${RUSTUP_HOME:-./.scratch/rustup}" )"
	test -d "${RUSTUP_HOME}"
	test -e "${RUSTUP_HOME}/.initialized"
	
	export -- CARGO_HOME="$( exec -- readlink -e -- "./.scratch/cargo" )"
	test -d "${CARGO_HOME}"
	test -e "${CARGO_HOME}/.initialized"
	
	export -- PATH="$( exec -- readlink -e -- "${CARGO_HOME}/bin" ):${PATH}"
	
	exec -- "${ZRUN[@]}" ':: workbench / delegate / execute' rustup --quiet "${@}"
!!




<< workbench / rustup / initialize
	
	test "${#}" -eq 0
	
	export -- RUSTUP_HOME="$( exec -- readlink -e -- "${RUSTUP_HOME:-./.scratch/rustup}" )"
	test -d "${RUSTUP_HOME}"
	
	if test -e "${RUSTUP_HOME}/.initialized" ; then
		exit -- 0
	fi
	
	export -- CARGO_HOME="$( exec -- readlink -e -- "./.scratch/cargo" )"
	test -d "${CARGO_HOME}"
	
	case "${__RUST__OS}" in
		( linux )
			_url='https://static.rust-lang.org/rustup/dist/x86_64-unknown-linux-gnu/rustup-init'
			_target=x86_64-unknown-linux-gnu
		;;
		( * )
			printf -- '[ee]  unknown OS `%s`;  aborting!\n' "${__RUST__OS}" >&2
			exit -- 1
		;;
	esac
	
	curl -s -f -L -o "${RUSTUP_HOME}/rustup-init.tmp" -- "${_url}"
	chmod +x -- "${RUSTUP_HOME}/rustup-init.tmp"
	mv -T -- "${RUSTUP_HOME}/rustup-init.tmp" "${RUSTUP_HOME}/rustup-init"
	
	export -- RUSTUP_INIT_SKIP_PATH_CHECK=yes
	
	"${ZRUN[@]}" ':: workbench / delegate / execute' \
		"${RUSTUP_HOME}/rustup-init" \
			--profile minimal \
			--target "${_target}" \
			--default-toolchain none \
			--default-host "${_target}" \
			--no-update-default-toolchain \
			--no-modify-path \
			--quiet \
			-y \
	#
	
	touch -- "${RUSTUP_HOME}/.initialized"
	touch -- "${CARGO_HOME}/.initialized"
!!




<< workbench / store / initialize
	test "${#}" -eq 0
	if test ! -d ./.scratch ; then
		_store="${__WORKBENCH__SCRATCH}/${__WORKBENCH__IDENTIFIER}"
		_store="$( exec -- readlink -f -- "${_store}" )"
		mkdir -- "${_store}"
		ln -s -f -T -- "${_store}" ./.scratch
	fi
	for _folder in rustup cargo registry target temporary ; do
		if test ! -d "./.scratch/${_folder}" ; then
			mkdir -- "./.scratch/${_folder}"
		fi
	done
	if test ! -e ./.scratch/cargo/registry ; then
		ln -s -f -T -- ../registry ./.scratch/cargo/registry
	fi
	for _folder in debug--build release--build debug--test release--test debug--check debug--clippy cargo--install cargo--dependencies ; do
		if test ! -d "./.scratch/target/${_folder}" ; then
			mkdir -- "./.scratch/target/${_folder}"
			touch -- "./.scratch/target/${_folder}/.initialized"
		fi
	done
	if test ! -e ./target ; then
		ln -s -f -T -- ./.scratch/target ./target
	fi
!!




--<< workbench / delegate / execute
	
	test "${#}" -ge 1
	
	readarray -d '' -- _environment_0 \
		< <( exec -- sort -z -- /proc/self/environ ) \
	#
	_environment=()
	for _variable in "${_environment_0[@]}" ; do
		_name="${_variable%%=*}"
		_keep=true
		_warn=true
		case "${_name}" in
			
			( PATH | HOME | TMPDIR | TERM | USER | LOGNAME | LANG | LC_ALL ) ;;
			( SHELL | EDITOR | PAGER ) ;;
			
			( RUSTUP_HOME | RUSTUP_INIT_SKIP_PATH_CHECK ) ;;
			( CARGO_HOME | CARGO_TARGET_DIR | CARGO_LOG ) ;;
			( CARGO_BUILD_RUSTFLAGS | CARGO_BUILD_JOBS ) ;;
			( CARGO_TERM_VERBOSE | CARGO_TERM_PROGRESS_WHEN | CARGO_TERM_COLOR ) ;;
			
			( RUST_BACKTRACE | RUST_MIN_STACK ) ;;
			( RUSTC_BOOTSTRAP ) ;;
			
			( __RUST__OS | __RUST__TOOLCHAIN | __RUST__TARGET | __RUST__LINKAGE | __RUST__FLAGS ) _warn=false ;;&
			( __CARGO__TARGET_DIR ) _warn=false ;;&
			( __VONUVOLI__FEATURES ) _warn=false ;;&
			( __WORKBENCH__IDENTIFIER | __WORKBENCH__SCRATCH | __WORKBENCH__WRAP ) _warn=false ;;&
			
			( ZRUN_* ) _warn=false ;;&
			( UNAME_* ) _warn=false ;;&
			
			( _ | PWD | OLDPWD | SHLVL ) _warn=false ;;&
			( LESS | LESSSECURE | LESSHISTSIZE | LESSHISTFILE ) _warn=false ;;&
			( TMUX | TMUX_PANE | TERM_PROGRAM | TERM_PROGRAM_VERSION ) _warn=false ;;&
			( DISPLAY | DBUS_SESSION_BUS_ADDRESS | PULSE_SERVER | PULSE_COOKIE ) _warn=false ;;&
			( SUDO_ASKPASS | SSH_ASKPASS | SSH_AUTH_SOCK | GPG_AGENT_INFO ) _warn=false ;;&
			( XDG_CONFIG_HOME | XDG_DATA_HOME | XDG_STATE_HOME | XDG_CACHE_HOME | XDG_CONFIG_DIRS | XDG_DATA_DIRS | XDG_RUNTIME_DIR ) _warn=false ;;&
			
			( * )
				_keep=false
			;;
		esac
		if test "${_keep}" == true ; then
			if test "${_name}=" == "${_variable}" ; then
				printf -- '[ww]  empty environment `%s`!\n' "${_variable}" >&2
			fi
			_environment+=( "${_variable}" )
		else
			if test "${_warn}" == true ; then
				printf -- '[ww]  unsetting environment `%s`!\n' "${_variable}" >&2
			fi
		fi
	done
	
	_arguments_fingerprint="$(
			printf -- '%s\0' "${@}" \
			| sort -z \
			| md5sum -b \
			| cut -f 1 -d ' ' \
			#
		)"
	
	_environment_fingerprint="$(
			printf -- '%s\0' "${_environment[@]}" \
			| sort -z \
			| md5sum -b \
			| cut -f 1 -d ' ' \
			#
		)"
	
	_wrapper=(
			nice -n 19 --
			env -i "${_environment[@]}"
		)
	
	_command_display=()
	_command_exeute=()
	for _command_argument in "${@}" ; do
		if test "${_command_argument}" != '----' ; then
			_command_execute+=( "${_command_argument}" )
		fi
		if test "${#_command_display[@]}" -ge 1 ; then
			_command_display+=( "${_command_argument}" )
		elif test "${_command_argument}" == '----' ; then
			_command_display+=( "##" )
		fi
	done
	if test "${#_command_display[@]}" -eq 0 ; then
		_command_display=( "${_command_execute[@]}" )
	fi
	
	case "${__WORKBENCH__WRAP}" in
		( true )
			printf -- '\n' >&2
			printf -- '[--]\n' >&2
			printf -- '[>>]  %s\n' "${_command_display[*]@Q}" >&2
		#	printf -- '[>>]  * using arguments fingerprint:   `%s`;\n' "${_arguments_fingerprint[@]}" >&2
		#	printf -- '[>>]  * using environment fingerprint: `%s`;\n' "${_environment_fingerprint[@]}" >&2
		#	printf -- '[>>]  * setting environment:  `%s`;\n' "${_environment[@]}" >&2
			printf -- '\n' >&2
			"${_wrapper[@]}" \
				"$( type -P -- nodaemon )" \
				"${_command_execute[@]}" \
			#
			printf -- '\n' >&2
			printf -- '[--]\n' >&2
			printf -- '\n' >&2
		;;
		( false )
			exec -- "${_wrapper[@]}" "${@}"
		;;
		( * )
			false -- 6c826f5e
		;;
	esac
!!

