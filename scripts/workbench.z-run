#!/dev/null




++<< workbench / initialize
	
	test "${#}" -eq 0
	
	export -- __RUST_OS="${__RUST_OS:?}"
	export -- __RUST_TOOLCHAIN=stable
	export -- __RUST_TARGET=default
	
	"${ZRUN[@]}" ':: workbench / store / initialize'
	
	"${ZRUN[@]}" ':: workbench / rustup / initialize'
	"${ZRUN[@]}" ':: workbench / rustup / install'
	
	"${ZRUN[@]}" ':: workbench / cargo / install / tools'
	
	"${ZRUN[@]}" ':: cargo / dependencies / fetch'
!!




<< workbench / cargo / install / tools
	
	test "${#}" -eq 0
	
	export -- CARGO_TARGET_DIR="$( exec -- readlink -e -- "${CARGO_TARGET_DIR:-./.workbench/target/cargo--install}" )"
	
	_tools=(
		#	cargo-tree
		#	cargo-license
		#	cargo-watch
		#	watchexec-cli
		#	hyperfine
		)
	
	for _tool in "${_tools[@]}" ; do
		"${ZRUN[@]}" ':: workbench / cargo / execute' install -- "${_tool}"
	done
!!




<< workbench / rustup / install
	
	test "${#}" -eq 0
	
	case "${__RUST_OS}" in
		
		( linux )
			_target_0=x86_64-unknown-linux-gnu
			_targets=(
					x86_64-unknown-linux-gnu
					x86_64-unknown-linux-musl
				)
			_toolchains=(
					stable
					beta
					nightly
				)
			_components=(
					cargo-x86_64-unknown-linux-gnu
					rustc-x86_64-unknown-linux-gnu
					rust-std-x86_64-unknown-linux-gnu
					rust-std-x86_64-unknown-linux-musl
					rust-docs-x86_64-unknown-linux-gnu
					rustfmt-x86_64-unknown-linux-gnu
					clippy-x86_64-unknown-linux-gnu
				)
		;;
		
		( * )
			printf -- '[ee]  invalid Rust OS: `%s`;  aborting!\n' "${__RUST_OS}" >&2
			exit -- 1
		;;
	esac
	
	for _toolchain in "${_toolchains[@]}" ; do
		
		"${ZRUN[@]}" ':: workbench / rustup / execute' toolchain install --target "${_target_0}" --profile minimal -- "${_toolchain}"
		
		for _component in "${_components[@]}" ; do
			"${ZRUN[@]}" ':: workbench / rustup / execute' component add --target "${_target_0}" --toolchain "${_toolchain}" -- "${_component}"
		done
		
		for _target in "${_targets[@]}" ; do
			if test ! -e "./.workbench/cargo--${_toolchain}--${_target}" ; then
				mkdir -- "./.workbench/cargo--${_toolchain}--${_target}"
				if ! test -e "./.workbench/cargo--${_toolchain}--${_target}/registry" ; then
					ln -s -f -T -- ../registry "./.workbench/cargo--${_toolchain}--${_target}/registry"
				fi
				if ! test -e "./.workbench/cargo--${_toolchain}--${_target}/bin" ; then
					ln -s -f -T -- "../rustup/toolchains/${_toolchain}-${_target_0}/bin" "./.workbench/cargo--${_toolchain}--${_target}/bin"
				fi
				touch -- "./.workbench/cargo--${_toolchain}--${_target}/.initialized"
			fi
		done
		
		if test ! -e "./.workbench/cargo--${_toolchain}--default" ; then
			ln -s -f -T -- "./cargo--${_toolchain}--${_target_0}" "./.workbench/cargo--${_toolchain}--default"
		fi
	done
!!




--<< workbench / cargo / execute
	
	export -- RUSTUP_HOME="$( exec -- readlink -e -- "${RUSTUP_HOME:-./.workbench/rustup}" )"
	test -d "${RUSTUP_HOME}"
	test -e "${RUSTUP_HOME}/.initialized"
	
	export -- CARGO_HOME="$( exec -- readlink -e -- "./.workbench/cargo--${__RUST_TOOLCHAIN}--${__RUST_TARGET}" )"
	test -d "${CARGO_HOME}"
	test -e "${CARGO_HOME}/.initialized"
	
	export -- CARGO_TARGET_DIR="$( exec -- readlink -e -- "${CARGO_TARGET_DIR:-./.workbench/target/default}" )"
	test -d "${CARGO_TARGET_DIR}"
	test -e "${CARGO_TARGET_DIR}/.initialized"
	
	export -- PATH="$( exec -- readlink -e -- "${CARGO_HOME}/bin" ):${PATH}"
	
	_rustflags=()
	if test -n "${__RUST_FLAGS:-}" ; then
		_rustflags+=( "${__RUST_FLAGS}" )
	fi
	case "${__RUST_LINKAGE:-}" in
		( '' )
		;;
		( dynamic )
			_rustflags+=(
					-C target-feature=-crt-static
					-C relocation-model=pic
				)
		;;
		( static )
			_rustflags+=(
					-C target-feature=+crt-static
					-C relocation-model=static
				)
		;;
		( * )
			printf -- '[ee]  invalid Rust linkage `%s`;  aborting!\n' "${__RUST_LINKAGE}" >&2
		;;
	esac
	_rustflags+=(
			--remap-path-prefix "$( exec -- readlink -e -- ./.workbench )=.../workbench"
			--remap-path-prefix "$( exec -- readlink -e -- . )=.../workbench"
			--remap-path-prefix "$( exec -- readlink -e -- ./sources )=.../sources"
			--remap-path-prefix "${RUSTUP_HOME}=.../rustup"
			--remap-path-prefix "${CARGO_HOME}=.../cargo"
			--remap-path-prefix "${CARGO_HOME}/registry=.../registry"
			--remap-path-prefix "${CARGO_TARGET_DIR}=.../target"
			--remap-path-prefix "$( exec -- readlink -e -- "./.workbench" )/cargo--${__RUST_TOOLCHAIN}--${__RUST_TARGET}=.../cargo"
			--remap-path-prefix "$( exec -- readlink -e -- "./.workbench" )/cargo--${__RUST_TOOLCHAIN}--${__RUST_TARGET}/registry=.../registry"
			--remap-path-prefix "$( exec -- readlink -e -- "./.workbench" )/cargo=.../cargo"
			--remap-path-prefix "$( exec -- readlink -e -- "./.workbench" )/cargo/registry=.../cargo/registry"
			--remap-path-prefix "$( exec -- readlink -e -- "./.workbench" )/registry=.../registry"
		)
	export -- CARGO_BUILD_RUSTFLAGS="${_rustflags[*]}"
	
	export -- RUSTC_BOOTSTRAP=1
	
	case "${1:-}" in
		( cargo-* )
			set -- "${@}"
		;;
		( * )
			set -- cargo "${@}"
		;;
	esac
	
	exec -- "${ZRUN[@]}" ':: workbench / delegate / execute' "${@}"
!!




--<< workbench / rustup / execute
	
	export -- RUSTUP_HOME="$( exec -- readlink -e -- "${RUSTUP_HOME:-./.workbench/rustup}" )"
	test -d "${RUSTUP_HOME}"
	test -e "${RUSTUP_HOME}/.initialized"
	
	export -- CARGO_HOME="$( exec -- readlink -e -- "./.workbench/cargo" )"
	test -d "${CARGO_HOME}"
	test -e "${CARGO_HOME}/.initialized"
	
	export -- PATH="$( exec -- readlink -e -- "${CARGO_HOME}/bin" ):${PATH}"
	
	exec -- "${ZRUN[@]}" ':: workbench / delegate / execute' rustup --quiet "${@}"
!!




<< workbench / rustup / initialize
	
	test "${#}" -eq 0
	
	export -- RUSTUP_HOME="$( exec -- readlink -e -- "${RUSTUP_HOME:-./.workbench/rustup}" )"
	test -d "${RUSTUP_HOME}"
	
	if test -e "${RUSTUP_HOME}/.initialized" ; then
		exit -- 0
	fi
	
	export -- CARGO_HOME="$( exec -- readlink -e -- "./.workbench/cargo" )"
	test -d "${CARGO_HOME}"
	
	case "${__RUST_OS}" in
		( linux )
			_url='https://static.rust-lang.org/rustup/dist/x86_64-unknown-linux-gnu/rustup-init'
			_target=x86_64-unknown-linux-gnu
		;;
		( * )
			printf -- '[ee]  unknown OS `%s`;  aborting!\n' "${__RUST_OS}" >&2
			exit -- 1
		;;
	esac
	
	curl -s -f -L -o "${RUSTUP_HOME}/rustup-init.tmp" -- "${_url}"
	chmod +x -- "${RUSTUP_HOME}/rustup-init.tmp"
	mv -T -- "${RUSTUP_HOME}/rustup-init.tmp" "${RUSTUP_HOME}/rustup-init"
	
	export -- RUSTUP_INIT_SKIP_PATH_CHECK=yes
	
	"${ZRUN[@]}" ':: workbench / delegate / execute' \
		"${RUSTUP_HOME}/rustup-init" \
			--profile minimal \
			--target "${_target}" \
			--default-toolchain stable \
			--default-host "${_target}" \
			--no-update-default-toolchain \
			--no-modify-path \
			--quiet \
			-y \
	#
	
	touch -- "${RUSTUP_HOME}/.initialized"
	touch -- "${CARGO_HOME}/.initialized"
!!




<< workbench / store / initialize
	test "${#}" -eq 0
	if test ! -d ./.workbench ; then
		_store="${TMPDIR}/vonuvoli-scheme--workbench--${UID}--${RANDOM}-${RANDOM}-${RANDOM}-${RANDOM}"
		_store="$( exec -- readlink -f -- "${_store}" )"
		mkdir -- "${_store}"
		ln -s -f -T -- "${_store}" ./.workbench
	fi
	for _folder in rustup cargo registry target ; do
		if test ! -d "./.workbench/${_folder}" ; then
			mkdir -- "./.workbench/${_folder}"
		fi
	done
	if test ! -e ./.workbench/cargo/registry ; then
		ln -s -f -T -- ../registry ./.workbench/cargo/registry
	fi
	for _folder in debug--build release--build debug--test release--test debug--check debug--clippy cargo--install cargo--dependencies ; do
		if test ! -d "./.workbench/target/${_folder}" ; then
			mkdir -- "./.workbench/target/${_folder}"
			touch -- "./.workbench/target/${_folder}/.initialized"
		fi
	done
	if test ! -e ./target ; then
		ln -s -f -T -- ./.workbench/target ./target
	fi
!!




--<< workbench / delegate / execute
	test "${#}" -ge 1
	
	readarray -d '' -- _environment_0 \
		< <( env -0 | sort -z ) \
	#
	_environment=()
	for _variable in "${_environment_0[@]}" ; do
		_name="${_variable%%=*}"
		_keep=true
		_warn=true
		case "${_name}" in
			
			( PATH | HOME | TMPDIR | TERM | USER | LOGNAME | LANG | LC_ALL ) ;;
			( SHELL | EDITOR | PAGER ) ;;
			
			( RUSTUP_HOME | RUSTUP_INIT_SKIP_PATH_CHECK ) ;;
			( CARGO_HOME | CARGO_TARGET_DIR | CARGO_LOG ) ;;
			( CARGO_BUILD_RUSTFLAGS | CARGO_BUILD_JOBS ) ;;
			( CARGO_TERM_VERBOSE | CARGO_TERM_PROGRESS_WHEN | CARGO_TERM_COLOR ) ;;
			
			( RUST_BACKTRACE | RUST_MIN_STACK ) ;;
			( RUSTC_BOOTSTRAP ) ;;
			
			( __RUST_OS | __RUST_TOOLCHAIN | __RUST_TARGET | __RUST_LINKAGE | __RUST_FLAGS ) _warn=false ;;&
			( __VONUVOLI_FEATURES ) _warn=false ;;&
			( __WORKBENCH_WRAP ) _warn=false ;;&
			
			( ZRUN_* ) _warn=false ;;&
			
			( _ | PWD | OLDPWD | SHLVL ) _warn=false ;;&
			( LESS | LESSSECURE | LESSHISTSIZE | LESSHISTFILE ) _warn=false ;;&
			( TMUX | TMUX_PANE | TERM_PROGRAM | TERM_PROGRAM_VERSION ) _warn=false ;;&
			( DISPLAY | DBUS_SESSION_BUS_ADDRESS | PULSE_SERVER | PULSE_COOKIE ) _warn=false ;;&
			( SUDO_ASKPASS | SSH_ASKPASS | SSH_AUTH_SOCK | GPG_AGENT_INFO ) _warn=false ;;&
			( XDG_CONFIG_HOME | XDG_DATA_HOME | XDG_STATE_HOME | XDG_CACHE_HOME | XDG_CONFIG_DIRS | XDG_DATA_DIRS | XDG_RUNTIME_DIR ) _warn=false ;;&
			
			( * )
				_keep=false
			;;
		esac
		if test "${_keep}" == true ; then
			if test "${_name}=" == "${_variable}" ; then
				printf -- '[ww]  empty environment `%s`!\n' "${_variable}" >&2
			fi
			_environment+=( "${_variable}" )
		else
			if test "${_warn}" == true ; then
				printf -- '[ww]  unsetting environment `%s`!\n' "${_variable}" >&2
			fi
		fi
	done
	
	_arguments_fingerprint="$(
			printf -- '%s\0' "${@}" \
			| sort -z \
			| md5sum -b \
			| cut -f 1 -d ' ' \
			#
		)"
	
	_environment_fingerprint="$(
			printf -- '%s\0' "${_environment[@]}" \
			| sort -z \
			| md5sum -b \
			| cut -f 1 -d ' ' \
			#
		)"
	
	_wrapper=(
			nice -n 19 --
			env -i "${_environment[@]}"
		)
	
	case "${__WORKBENCH_WRAP}" in
		( true )
			printf -- '\n' >&2
			printf -- '[--]\n' >&2
			printf -- '[>>]  %s\n' "${*@Q}" >&2
		#	printf -- '[>>]  * using arguments fingerprint:   `%s`;\n' "${_arguments_fingerprint[@]}" >&2
		#	printf -- '[>>]  * using environment fingerprint: `%s`;\n' "${_environment_fingerprint[@]}" >&2
		#	printf -- '[>>]  * setting environment:  `%s`;\n' "${_environment[@]}" >&2
			printf -- '\n' >&2
			nodaemon "${_wrapper[@]}" "${@}"
			printf -- '\n' >&2
			printf -- '[--]\n' >&2
			printf -- '\n' >&2
		;;
		( false )
			exec -- "${_wrapper[@]}" "${@}"
		;;
		( * )
			false -- 6c826f5e
		;;
	esac
!!

