#!/dev/null




<< sources / generate
	test "${#}" -eq 0
	"${ZRUN[@]}" ':: sources / generate / include'
!!




<< sources / generate / include
	test "${#}" -eq 0
	
	if test -e ./target/lib_sources.in ; then
		_timestamp_previous="$( exec -- date --reference ./target/lib_sources.in -- '+%s' )"
	else
		_timestamp_previous=0
	fi
	
	# printf -- '[ii]  regenerating `lib_sources.in`...\n' >&2
	
	_timestamp_current="$(
			find ./sources/ -xdev \
					-type f \
					-not -name '.*' \
					-not -name 'lib_sources.in' \
					\( -name '*.rs' -o -name '*.in' \) \
					-printf '%T@\n' \
			| sort -n \
			| tail -n 1 \
			#
		)"
	_timestamp_current="${_timestamp_current%%.*}"
	
	if test "${_timestamp_previous}" -ge "${_timestamp_current}" ; then
		exit -- 0
	fi
	
	if test -e ./target/lib_sources.in ; then
		rm -- ./target/lib_sources.in
	fi
	if test ! -e ./target/lib_sources.files ; then
		mkdir -- ./target/lib_sources.files
	fi
	
	readarray -t -- _files \
		< <(
			find ./sources/ -xdev \
					-type f \
					-not -name '.*' \
					-not -name 'lib_sources.in' \
					\( -name '*.rs' -o -name '*.in' \) \
					-printf '%f\n' \
			| sort \
			#
		)
	
	for _file in "${_files[@]}" ; do
		
		if test -e "./target/lib_sources.files/${_file}" -a "./sources/${_file}" -ot "./target/lib_sources.files/${_file}" ; then
			continue
		fi
		
		printf -- '[ii]  regenerating `lib_sources.files/%s`...\n' "${_file}" >&2
		
		(
			printf -- '\n\n'
			readarray -t -- _lines \
				< <( exec -- jq -R '.' < "./sources/${_file}" ) \
			#
			_lines_count="${#_lines[@]}"
			for (( _line_index = 0 ; _line_index < _lines_count ; _line_index += 1 )) ; do
				printf '(("%s", %d), %s),\n' "${_file}" "$(( _line_index + 1 ))" "${_lines[$_line_index]}"
			done
			printf -- '\n\n'
		) \
			>| "./target/lib_sources.files/${_file}.tmp" \
		#
		
		touch -d "@${_timestamp_current}" -- "./target/lib_sources.files/${_file}.tmp"
		mv -T -- "./target/lib_sources.files/${_file}.tmp" "./target/lib_sources.files/${_file}"
	done
	
	(
		printf -- '%s\n' 'static SOURCES : &[((&str, usize), &str)] = &['
		for _file in "${_files[@]}" ; do
			cat -- "./target/lib_sources.files/${_file}"
		done
		printf -- '];\n'
	) \
		>| ./target/lib_sources.in.tmp \
	#
	
	#! touch -d "@${_timestamp_current}" -- ./target/lib_sources.in.tmp
	mv -T -- ./target/lib_sources.in.tmp ./target/lib_sources.in
!!




<< sources / codes / duplicates
	test "${#}" -eq 0
	exec -- xargs \
			-r -d '\n' -I {} \
			-a <(
				grep \
						-o \
						-P \
						-e '(?<=\[)[0-9a-f]{8}(?=\])|(?<=0x)[0-9a-f]{8}(?=[^0-9a-zA-Z]|$)' \
						-h \
						-r ./sources \
						--include '*.rs' \
						--include '*.in' \
				| sort \
				| uniq -d
			) \
			-- \
		grep \
			-P \
			-e '(?<=\[){}(?=\])|(?<=0x){}(?=[^0-9a-zA-Z]|$)' \
			-r ./sources \
			-n \
			--include '*.rs' \
			--include '*.in' \
			--color \
	#
!!




<< sources / generate / sbom
	test "${#}" -eq 0
	
	"${ZRUN[@]}" ':: cargo / dependencies / cyclonedx'
	
	jq \
			'
				.components[]
				| .licenses = (
					.licenses
					| map (.expression)
				)
				| .externalReferences = (
					.externalReferences
					| group_by (.type)
					| map ({
						key : .[0].type,
						value : . | map (del (.type))
					})
					| from_entries
				)
				| .vcs_url = .externalReferences.vcs[0].url
			' \
		< ./documentation/sbom/cyclonedx.json \
	| jq \
			'
				. as $component
				| {
					name : .name,
					version : .version,
					purl : .purl,
					license :
						.licenses
						| join (" | ")
						| (
							({
								"ring" : "ISC AND MIT AND OpenSSL",
							}[$component.name])
							// ({
								"MIT/Apache-2.0" : "MIT OR Apache-2.0",
								"" : "{unknown}",
							}[.])
							// .
						),
					vcs : .vcs_url,
				}
			' \
	| jq --slurp . \
		>| ./documentation/sbom/sbom.json \
	#
	
	gomplate \
			-c .=stdin:///.json \
			--in \
	'
	## SBOM (Software Bill of Materials)
	
	| Dependency | Version | License (SPDX) | VCS URL |
	| ---        | ---     | ---            | ---     |
	{{ range $_, $_component := . -}}
	| `{{ $_component.name }}` | `{{ $_component.version }}` | `{{ $_component.license }}` | <{{ $_component.vcs }}> |
	{{ end }}
	' \
		< ./documentation/sbom/sbom.json \
		>| ./documentation/sbom/sbom.md \
	#
	
	cmark-gfm \
			--to html \
			--extension autolink \
			--extension table \
			--validate-utf8 \
			--unsafe \
		< ./documentation/sbom/sbom.md \
		>| ./documentation/sbom/sbom.html \
	#
	
	w3m \
			-dump \
			-T text/html \
			-cols 160 \
			-no-graph \
			-I utf-8 \
			-O utf-8 \
			-o tabstop=4 \
			-o indent_incr=4 \
			-o display_link_number=false \
		< ./documentation/sbom/sbom.html \
		>| ./documentation/sbom/sbom.txt \
	#
!!

